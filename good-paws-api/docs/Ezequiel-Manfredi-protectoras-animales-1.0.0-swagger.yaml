openapi: 3.0.0
servers: []
info:
  description: api for protectoras-animales
  version: "1.0.0"
  title: Protectora de Animales
tags:
  - name: default
    description: endpoints
  - name: Authentication
    description: token operations
  - name: Centers Filter
    description: features and funcionality for centers
  - name: Animals Filter
    description: features and functionality for animals
  - name: Protectors
    description: CRUD of protector
  - name: Centers
    description: CRUD of center
  - name: Animals
    description: CRUD of animal
  - name: Races
    description: CRUD of race
  - name: Types
    description: CRUD of type
  - name: Sexes
    description: CRUD of sex
  - name: Users
    description: CRUD of user
  - name: Calendars
    description: CRUD of calendar
security:
  - bearerAuth: []
paths:
  /races:
    get:
      summary: "Search races"
      tags:
        - Races
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of race list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Races list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRaces"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new race"
      tags:
        - Races
      responses:
        '201':
          description: "New race has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRace'
  /races/{id}:
    get:
      summary: "Search a race"
      tags:
        - Races
      parameters:
        - name: id
          description: "Race id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a race"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
        '404':
          description: "Race not found"
    put:
      summary: "Modify an existent race"
      tags:
        - Races
      parameters:
        - name: id
          description: "Race id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Race has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Race not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRace"
    delete:
      summary: "Delete an existent race"
      tags:
        - Races
      parameters:
        - name: id
          description: "Race id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Race has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Race not found"
  
  /types:
    get:
      summary: "Search types"
      tags:
        - Types
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of type list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Types list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetType"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new type"
      tags:
        - Types
      responses:
        '201':
          description: "New type has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryType"
  /types/{id}:
    get:
      summary: "Search a type"
      tags:
        - Types
      parameters:
        - name: id
          description: "Type id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
        '404':
          description: "Type not found"
    put:
      summary: "Modify an existent type"
      tags:
        - Types
      parameters:
        - name: id
          description: "Type id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Type has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Type not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryType"
    delete:
      summary: "Delete an existent type"
      tags:
        - Types
      parameters:
        - name: id
          description: "Type id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Type has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Type not found"
  
  /sexes:
    get:
      summary: "Search sexes"
      tags:
        - Sexes
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of sexes list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Sexes list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSex"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new sex"
      tags:
        - Sexes
      responses:
        '201':
          description: "New sex has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sex"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySex"
  /sexes/{id}:
    get:
      summary: "Search a sex"
      tags:
        - Sexes
      parameters:
        - name: id
          description: "Sex id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a sex"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sex"
        '404':
          description: "Sex not found"
    put:
      summary: "Modify an existent sex"
      tags:
        - Sexes
      parameters:
        - name: id
          description: "Sex id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Sex has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sex"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Sex not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySex"
    delete:
      summary: "Delete an existent sex"
      tags:
        - Sexes
      parameters:
        - name: id
          description: "Sex id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Sex has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Sex not found"
  
  /animals:
    get:
      summary: "Search animals"
      tags:
        - Animals
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of animals list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Animals list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAnimal"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new animal"
      tags:
        - Animals
      responses:
        '201':
          description: "New animal has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Animal"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulatea resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryAnimal"
  /animals/{id}:
    get:
      summary: "Search an animal"
      tags:
        - Animals
      parameters:
        - name: id
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return an animal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Animal"
        '404':
          description: "Animal not found"
    put:
      summary: "Modify an existent animal"
      tags:
        - Animals
      parameters:
        - name: id
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Animal has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Animal"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Animal not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryAnimal"
    delete:
      summary: "Delete an existent animal"
      tags:
        - Animals
      parameters:
        - name: id
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Animal has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Animal not found"
  /animals/{animalId}/images:
    get:
      summary: "Search animal images"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of animals list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Animal images list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAnimalImages"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Upload new animal image"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '201':
          description: "New animal image has been saved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  animalId:
                    type: number
                    example: 1
                  picture:
                    $ref: "#/components/schemas/Image"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        description: "The `picture` field can be any amount of files with the same field name"
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
                  example: imageName.png
  /animals/{animalId}/images/{id}:
    get:
      summary: "Search an animal image"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: id
          description: "Animal image id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return an animal image"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  animalId:
                    type: number
                    example: 1
                  picture:
                    $ref: "#/components/schemas/Image"
        '404':
          description: "Animal image not found"
    delete:
      summary: "Delete an existent animal image"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: id
          description: "Animal image id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Animal image has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Animal image not found"
  /animals/{animalId}/medical-history:
    get:
      summary: "Search animal medical history"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of medical history list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Medical history list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMedicalHistory"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new medical history"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '201':
          description: "New medical history has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalHistory"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/QueryMedicalHistory"
  /animals/{animalId}/medical-history/{id}:
    get:
      summary: "Search an medical history"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: id
          description: "Medical history id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return an medical history"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalHistory"
        '404':
          description: "Medical history not found"
    delete:
      summary: "Delete an existent medical history"
      tags:
        - Animals
      parameters:
        - name: animalId
          description: "Animal id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: id
          description: "Medical history id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Medical history has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Medical history not found"
  
  /protectors:
    get:
      summary: "All protectors"
      tags:
        - Protectors
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of protectors list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Protectors list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProtector"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new protector"
      tags:
        - Protectors
      responses:
        '201':
          description: "New protector has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Protector"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        description: "The `contact` field can have any attribute, it is saved dynamically"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryProtector"
  /protectors/{id}:
    get:
      summary: "Search a protector"
      tags:
        - Protectors
      parameters:
        - name: id
          description: "Protector id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a protector"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Protector"
        '404':
          description: "Protector not found"
    put:
      summary: "Modify an existent protector"
      tags:
        - Protectors
      parameters:
        - name: id
          description: "Protector id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Protector has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Protector"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Protector not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryProtector"
    delete:
      summary: "Delete an existent protector"
      tags:
        - Protectors
      parameters:
        - name: id
          description: "Protector id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Protector has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Protector not found"
  
  /centers:
    get:
      summary: "Search centers"
      tags:
        - Centers
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of centers list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Centers list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCenter"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new center"
      tags:
        - Centers
      responses:
        '201':
          description: "New center has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Center"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        description: "The `contact` field can have any attribute, it is saved dynamically.<br> For upload the optional `picture` field with an image file, you need to change to multipart/form-data"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryCenter"
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/QueryCenter"
                - type: object
                  properties:
                    picture:
                      type: string
                      format: binary
                      example: imageName.png
  /centers/{id}:
    get:
      summary: "Search a center"
      tags:
        - Centers
      parameters:
        - name: id
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a center"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Center"
        '404':
          description: "Center not found"
    put:
      summary: "Modify an existent center"
      tags:
        - Centers
      parameters:
        - name: id
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Center has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Center"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Center not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/QueryCenter"
                - type: object
                  properties:
                    deleteImage:
                      type: boolean
                      example: true
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/QueryCenter"
                - type: object
                  properties:
                    picture:
                      type: string
                      format: binary
                      example: imageName.png
                    deleteImage:
                      type: boolean
                      example: true
    delete:
      summary: "Delete an existent center"
      tags:
        - Centers
      parameters:
        - name: id
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Center has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Center not found"
  /centers/{centerId}/reviews:
    get:
      summary: "Search reviews"
      tags:
        - Centers
      parameters:
        - name: centerId
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of type list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Review list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReview"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new review"
      tags:
        - Centers
      parameters:
        - name: centerId
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '201':
          description: "New review has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryReview"
  /centers/{centerId}/reviews/{id}:
    get:
      summary: "Search a type"
      tags:
        - Centers
      parameters:
        - name: centerId
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: id
          description: "Type id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a review"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        '404':
          description: "Review not found"
    delete:
      summary: "Delete an existent review"
      tags:
        - Centers
      parameters:
        - name: centerId
          description: "Center id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
        - name: id
          description: "Review id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Review has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Review not found"
  
  /users:
    get:
      summary: "Search users"
      tags:
        - Users
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of users list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Users list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUser"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new user"
      tags:
        - Users
      responses:
        '201':
          description: "New user has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        description: "For upload the optional `picture` field with an image file, you need to change to multipart/form-data"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryUser"
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/QueryUser"
                - type: object
                  properties:
                    picture:
                      type: string
                      format: binary
                      example: imageName.png
  /users/{id}:
    get:
      summary: "Search a user"
      tags:
        - Users
      parameters:
        - name: id
          description: "User id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found"
    put:
      summary: "Modify an existent user"
      tags:
        - Users
      parameters:
        - name: id
          description: "User id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "User has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "User not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/QueryUser"
                - type: object
                  properties:
                    deleteImage:
                      type: boolean
                      example: true
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/QueryUser"
                - type: object
                  properties:
                    picture:
                      type: string
                      format: binary
                      example: imageName.png
                    deleteImage:
                      type: boolean
                      example: true
    delete:
      summary: "Delete an existent user"
      tags:
        - Users
      parameters:
        - name: id
          description: "User id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "User has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "User not found"
  
  /calendars:
    get:
      summary: "Search calendar"
      tags:
        - Calendars
      parameters:
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of users list"
          in: query
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: "Calendar list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCalendar"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new calendar"
      tags:
        - Calendars
      responses:
        '201':
          description: "New calendar has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryCalendar"
  /calendars/{id}:
    get:
      summary: "Search a calendar"
      tags:
        - Calendars
      parameters:
        - name: id
          description: "Calendar id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Return a calendar"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
        '404':
          description: "Calendar not found"
    put:
      summary: "Modify an existent calendar"
      tags:
        - Calendars
      parameters:
        - name: id
          description: "Calendar id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Calendar has been modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Calendar not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryCalendar"
    delete:
      summary: "Delete an existent calendar"
      tags:
        - Calendars
      parameters:
        - name: id
          description: "Calendar id for search"
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: "Calendar has been deleted"
        '401':
          description: "Not authorized to manipulate a resource"
        '404':
          description: "Calendar not found"
  
  /animals/filterBy:
    get:
      summary: "filter of animals"
      tags:
        - Animals Filter
      parameters:
        - name: coordinates
          description: "User coordinates"
          in: query
          required: false
          schema:
            type: string
            example: "-122.39636,37.79129"
        - name: radius
          description: "Search radius in meters"
          in: query
          required: false
          schema:
            type: number
            example: 2000
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of protectors list"
          in: query
          required: false
          schema:
            type: number
            example: 10
        - name: name
          description: "Animal name"
          in: query
          required: false
          schema:
            type: string
            example: "Firulais"
        - name: race
          description: "Race id"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: type
          description: "Type id"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: sex
          description: "Sex id"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: centerId
          description: "center filter"
          in: query
          schema:
            type: number
            example: 1
        - name: friendly
          description: "Animal is friendly"
          in: query
          schema:
            type: boolean
            example: true
        - name: canTravel
          description: "Animal can travel"
          in: query
          schema:
            type: boolean
            example: true
        - name: isElder
          description: "Animal is elder"
          in: query
          schema:
            type: boolean
            example: true
        - name: hasEspecialCondition
          description: "Animal has especial condition"
          in: query
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: "Return animals list or empty list"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnimal'
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /centers/filterBy:
    get:
      summary: "filter of centers"
      tags:
        - Centers Filter
      parameters:
        - name: coordinates
          description: "User coordinates"
          in: query
          required: false
          schema:
            type: string
            example: "-122.39636,37.79129"
        - name: radius
          description: "Search radius"
          in: query
          required: false
          schema:
            type: number
            example: 500
        - name: page
          description: "Page of results"
          in: query
          required: false
          schema:
            type: number
            example: 1
        - name: size
          description: "Max-size of protectors list"
          in: query
          required: false
          schema:
            type: number
            example: 10
        - name: protectorName
          description: "Name of protector"
          in: query
          required: false
          schema:
            type: string
            example: "Rabitos Felices"
        - name: centerName
          description: "Name of center"
          in: query
          required: false
          schema:
            type: string
            example: "Rabitos Felices"
        - name: location
          description: "specific location of center"
          in: query
          required: false
          schema:
            type: string
            example: "Valencia"
      responses:
        '200':
          description: "Return centers list or empty list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCenter"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /login:
    post:
      summary: "login"
      tags:
        - Authentication
      responses:
        '200':
          description: "Successful login"
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "bearer"
                  token:
                    type: string
                    example: "Nw.Vl4BCSVLVyGXFfS3NfuT85S6PoiIMV8B2bwNBHCsFOI1OVxUUlSpZYVaH-jC"
                  expires_at:
                    type: string
                    example: "2022-08-28T18:14:13.100-03:00"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "example@algo.com"
                password:
                  type: string
                  example: "12345678"
  /logout:
    post:
      summary: "logout"
      tags:
        - Authentication
      responses:
        '200':
          description: "Successful logout"
        '401':
          description: "Not authorized to manipulate a resource"
  /forgot:
    post:
      summary: "init password reset process"
      tags:
        - Authentication
      responses:
        '200':
          description: "Successful email sending"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "example@algo.com"
  /reset:
    post:
      summary: "password reset completed"
      tags:
        - Authentication
      responses:
        '200':
          description: "Successful password change"
        '400':
          description: "Return all errors"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: "Not authorized to manipulate a resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "12345678"
                password_comfirmation:
                  type: string
                  example: "12345678"
  
components:
  schemas:
    FieldError:
      type: object
      required:
        - field
        - error
      properties:
        field:
          type: string
          example: "some field"
        error:
          type: string
          example: "why the field is wrong"
    Error:
      type: object
      required:
        - totalErrors
        - errors
      properties:
        totalErrors:
          type: number
          example: 100
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"
    
    Race:
      type: object
      required: 
        - id
        - name
        - status
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "chiguagua"
        status:
          type: boolean
          example: false
    GetRaces:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Race"
    QueryRace:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
          example: "chiguagua"
    
    Type:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: perro
        status:
          type: boolean
          example: true
    GetType:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Type"
    QueryType:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
          example: "perro"
    
    Sex:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "femenino"
        status:
          type: boolean
          example: true
    GetSex:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Sex"
    QuerySex:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
          example: "femenino"
    
    Animal:
      type: object
      required:
        - id
        - name
        - raceId
        - typeId
        - sexId
        - adultSize
        - birthDate
        - centerId
        - extraDetails
        - observation
        - adopterId
        - adopted
        - friendly
        - canTravel
        - isElder
        - hasEspecialCondition
        - status
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "Firulais"
        raceId:
          type: number
          example: 1
        typeId:
          type: number
          example: 1
        sexId:
          type: number
          example: 1
        birthDate:
          type: string
          example: "2020-06-23"
        centerId:
          type: number
          example: 1
        extraDetails:
          type: string
          example: "no le agradan los gatos"
        adopterId:
          type: number
          example: 1
        friendly:
          type: boolean
          example: false
        canTravel:
          type: boolean
          example: true
        isElder:
          type: boolean
          example: false
        hasEspecialCondition:
          type: boolean
          example: false
        adultSize:
          type: string
          example: "1"
        observation:
          type: string
          example: "alguna observacion"
        adopted:
          type: boolean
          example: false
        status:
          type: boolean
          example: true
    GetAnimal:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Animal"
    QueryAnimal:
      type: object
      required: 
        - name
        - raceId
        - typeId
        - sexId
        - adultSize
        - birthDate
        - centerId
        - extraDetails
      properties:
        name:
          type: string
          example: "Firulais"
        raceId:
          type: number
          example: 1
        typeId:
          type: number
          example: 1
        sexId:
          type: number
          example: 1
        adultSize:
          type: number
          example: 1
          description: "0-none<br>1-small<br>2-medium<br>3-large"
        birthDate:
          type: string
          example: "2020-06-23"
        centerId:
          type: number
          example: 1
        extraDetails:
          type: string
          example: "no le agradan los gatos"
        adopterId:
          type: number
          example: 1
        adopted:
          type: boolean
          example: false
        friendly:
          type: boolean
          example: false
        canTravel:
          type: boolean
          example: true
        isElder:
          type: boolean
          example: false
        hasEspecialCondition:
          type: boolean
          example: false
        observation:
          type: string
          example: "alguna observacion"
    GetAnimalImages:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              animalId:
                type: number
                example: 1
              picture:
                $ref: "#/components/schemas/Image"
    MedicalHistory:
      type: object
      required:
        - id
        - title
        - observation
        - clinic
        - state
        - animalId
        - status
        - createdAt
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: "un titulo"
        observation:
          type: string
          example: "una observacion"
        clinic: 
          type: string
          example: "nombre de la clinica"
        state:
          type: string
          example: "1"
          description: "0-none<br>1-pending<br>2-done"
        authorId:
          type: number
          example: 1
        status:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2020-06-23"
    GetMedicalHistory:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/MedicalHistory"
    QueryMedicalHistory:
      type: object
      required: 
        - title
        - observation
        - clinic
        - state
      properties:
        title:
          type: string
          example: "un titulo"
        observation:
          type: string
          example: "una observacion"
        clinic: 
          type: string
          example: "nombre de la clinica"
        state:
          type: number
          example: 1
          description: "0-none<br>1-pending<br>2-done"
        status:
          type: boolean
          example: true
    
    Protector:
      type: object
      required:
        - id
        - name
        - description
        - location
        - coordinates
        - contact
        - status
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "Asociacion Civil Rabitos Felices"
        description:
          type: string
          example: "alguna descripcion"
        location:
          type: string
          example: "Reiseñor 86, Valencia"
        coordinates:
          type: string
          example: "-122.39636,37.79129"
        contact:
          type: object
          example: {
            telefono: "3020122203"
          }
        status:
          type: boolean
          example: true
    GetProtector:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Protector"
    QueryProtector:
      type: object
      required: 
        - name
        - location
        - coordinates
      properties:
        name:
          type: string
          example: "Asociacion Civil Rabitos Felices"
        description:
          type: string
          example: "alguna descripcion"
        contact:
          type: object
          example: {
            telefono: 3020122203
          }
        location:
          type: string
          example: "Reiseñor 86, Valencia"
        coordinates:
          type: string
          example: "-122.39636,37.79129"
    Center:
      type: object
      required:
        - id
        - name
        - description
        - contact
        - location
        - coordinates
        - protectorId
        - picture
        - averageRate
        - status
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "Centro de Acogida de Animales Abandonados"
        description:
          type: string
          example: "alguna descripcion"
        contact:
          type: object
          example: {
            telefono: 3020122203,
            CBU/CVU: 30201222033020122203,
            paypal: "http://dominio.com/algo"
          }
        location:
          type: string
          example: "Reiseñor 86, Valencia"
        coordinates:
          type: string
          example: "-122.39636,37.79129"
        protectorId:
          type: number
          example: 1
        picture:
          $ref: "#/components/schemas/Image"
        averageRate:
          type: number
          example: 3.6
          description: "from 0 to 5"
        status:
          type: boolean
          example: true
    GetCenter:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Center"
    QueryCenter:
      type: object
      required: 
        - name
        - location
        - coordinates
        - protectorId
      properties:
        name:
          type: string
          example: "Centro de Acogida de Animales Abandonados"
        description:
          type: string
          example: "alguna descripcion"
        contact:
          type: object
          example: {
            telefono: 3020122203
          }
        location:
          type: string
          example: "Reiseñor 86, Valencia"
        coordinates:
          type: string
          example: "-122.39636,37.79129"
        protectorId:
          type: number
          example: 1
    Review:
      type: object
      required:
        - id
        - title
        - text
        - rate
        - authorId
        - reviewedId
        - status
        - createdAt
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: "un titulo"
        text:
          type: string
          example: "una descripcion"
        rate: 
          type: number
          example: 3.45
          description: "from 0 to 5"
        authorId:
          type: number
          example: 1
        reviewedId:
          type: number
          example: 1
        status:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2020-06-23"
    GetReview:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/Review"
    QueryReview:
      type: object
      required: 
        - title
        - text
        - rate
      properties:
        title:
          type: string
          example: "un titulo"
        text:
          type: string
          example: "alguna descripcion"
        rate:
          type: number
          example: 2.3
    
    User:
      type: object
      required:
        - id
        - username
        - fullName
        - email
        - picture
        - userLevel
        - centerId
        - status
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: "Daisy"
        fullName:
          type: string
          example: "Sabrina Constance"
        email:
          type: string
          example: "SabrinaConstance@email.com"
        userLevel:
          type: string
          example: "1"
        picture:
          $ref: "#/components/schemas/Image"
        centerId:
          type: number
          example: 1
        status:
          type: boolean
          example: true
    GetUser:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/User"
    QueryUser:
      type: object
      required: 
        - username
        - password
        - password_confirmation
        - fullName
        - email
        - userLevel
      properties:
        username:
          type: string
          example: "Daisy"
        password:
          type: string
          example: "Daisy1234"
        password_confirmation:
          type: string
          example: "Daisy1234"
        fullName:
          type: string
          example: "Sabrina Constance"
        email:
          type: string
          example: "SabrinaConstance@email.com"
        userLevel:
          type: number
          example: 1
          description: "0-none<br>1-center<br>2-adopter"
        centerId:
          type: number
          example: 1
    
    Calendar:
      type: object
      required:
        - id
        - username
        - fullName
        - email
        - picture
        - userLevel
        - centerId
        - status
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: "Daisy"
        fullName:
          type: string
          example: "Sabrina Constance"
        email:
          type: string
          example: "SabrinaConstance@email.com"
        userLevel:
          type: string
          example: "1"
        picture:
          $ref: "#/components/schemas/Image"
        centerId:
          type: number
          example: 1
        status:
          type: boolean
          example: true
    GetCalendar:
      type: object
      required:
        - totalResults
        - results
      properties:
        totalResults:
          type: number
          example: 100
        results:
          type: array
          items:
            $ref: "#/components/schemas/User"
    QueryCalendar:
      type: object
      required: 
        - username
        - password
        - password_confirmation
        - fullName
        - email
        - userLevel
      properties:
        username:
          type: string
          example: "Daisy"
        password:
          type: string
          example: "Daisy1234"
        password_confirmation:
          type: string
          example: "Daisy1234"
        fullName:
          type: string
          example: "Sabrina Constance"
        email:
          type: string
          example: "SabrinaConstance@email.com"
        userLevel:
          type: number
          example: 1
          description: "0-none<br>1-center<br>2-adopter"
        centerId:
          type: number
          example: 1
    
    Image:
      type: object
      example:
        url: "/upload/{model}/{name}.png"
        name: "{model}/{name}.png"
        extname: "jpg"
        size: 5496
        mimeType: "image/jpeg"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT